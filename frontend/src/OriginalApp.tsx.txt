import { useEffect, useMemo, useRef, useState } from "react";
import { motion } from "framer-motion";
import ForceGraph2D from "react-force-graph-2d";
import { Search, Loader2, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
// import { ScrollArea } from "@/components/ui/scroll-area";

// 🔧 TIPOS
type Articulo = { titulo: string; link: string };
type Nodo = {
  palabra: string;
  articulos: Articulo[];
  relaciones: string[];
};

type DataJSON = {
  reporte: { resumen: string; hallazgos: string[] };
  grafo: Nodo[];
};

type GraphNode = {
  id: string;
  label: string;
  articulos: Articulo[];
};

type GraphLink = { source: string; target: string };

type GraphData = { nodes: GraphNode[]; links: GraphLink[] };

// 📦 Datos por defecto (fallback) en caso de no cargar el JSON externo
const defaultData: DataJSON = {
  reporte: {
    resumen:
      "Este reporte sintetiza tendencias ficticias observadas en una colección de publicaciones alojadas en el repositorio indicado. Se destacan patrones sobre IA generativa, evaluación del aprendizaje, y diseño de experiencias educativas apoyadas por datos.",
    hallazgos: [
      "La IA generativa se vincula con creatividad y evaluación auténtica en contextos educativos.",
      "El pensamiento de diseño aparece como puente entre investigación aplicada y práctica docente.",
      "Los artículos sobre analítica de aprendizaje se conectan con currículo y toma de decisiones.",
      "La adopción de machine learning requiere consideraciones éticas y de equidad.",
      "Los mapas conceptuales facilitan transferir hallazgos entre dominios STEM y humanidades.",
    ],
  },
  grafo: [
    {
      palabra: "IA generativa",
      articulos: [
        {
          titulo: "IA generativa para fomentar la creatividad en el aula: un estudio exploratorio",
          link: "https://github.com/jgalazka/SB_publications/tree/main/education/2024_ia_generativa_creatividad_aula.pdf",
        },
        {
          titulo: "Guía práctica de prompts para proyectos estudiantiles",
          link: "https://github.com/jgalazka/SB_publications/tree/main/toolkits/2025_guia_prompts_proyectos_estudiantiles.pdf",
        },
      ],
      relaciones: ["creatividad", "evaluación", "pensamiento de diseño", "ética"],
    },
    {
      palabra: "creatividad",
      articulos: [
        {
          titulo: "Medición de creatividad asistida por IA: rúbricas y casos",
          link: "https://github.com/jgalazka/SB_publications/tree/main/assessment/2023_medicion_creatividad_rubricas.pdf",
        },
        {
          titulo: "Talleres de ideación con modelos de lenguaje",
          link: "https://github.com/jgalazka/SB_publications/tree/main/workshops/2024_talleres_ideacion_llms.pdf",
        },
      ],
      relaciones: ["IA generativa", "pensamiento de diseño", "currículo"],
    },
  ],
};

// 🧠 Utilidad: construir datos para el grafo a partir del JSON
const buildGraphData = (nodos: Nodo[]): GraphData => {
  const nodes: GraphNode[] = [];
  const links: GraphLink[] = [];

  const exists = new Set(nodos.map((n) => n.palabra));

  nodos.forEach((n) => {
    nodes.push({ id: n.palabra, label: n.palabra, articulos: n.articulos });
    n.relaciones.forEach((rel) => {
      if (exists.has(rel)) {
        links.push({ source: n.palabra, target: rel });
      }
    });
  });

  // Eliminar duplicados (A->B y B->A) quedándonos con una sola
  const seen = new Set<string>();
  const uniqueLinks = links.filter((l) => {
    const a = String(l.source);
    const b = String(l.target);
    const key = a < b ? `${a}__${b}` : `${b}__${a}`;
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });

  return { nodes, links: uniqueLinks };
};

// 🔎 Filtra el subgrafo centrado en el término buscado (nodo + vecinos)
const filterGraphByQuery = (data: DataJSON, query: string): { grafo: Nodo[] } => {
  const q = query.trim().toLowerCase();
  if (!q) return { grafo: data.grafo };

  const map = new Map<string, Nodo>();
  data.grafo.forEach((n) => map.set(n.palabra, n));

  const center = data.grafo.find((n) => n.palabra.toLowerCase().includes(q));
  if (!center) return { grafo: [] };

  const vecinos = center.relaciones.filter((r) => map.has(r)).map((r) => map.get(r)!);
  return { grafo: [center, ...vecinos] };
};

// 🧩 Componentes UI
function Navbar({ onSearch }: { onSearch: (term: string) => void }) {
  const [term, setTerm] = useState("");

  return (
    <div className="sticky top-0 z-30 w-full border-b bg-white/80 backdrop-blur">
      <div className="mx-auto flex max-w-6xl items-center gap-2 p-3">
        <div className="text-xl font-semibold tracking-tight">GrafoConocimiento</div>
        <form
          className="ml-auto flex w-full max-w-xl items-center gap-2"
          onSubmit={(e) => {
            e.preventDefault();
            onSearch(term);
          }}
        >
          <div className="relative flex-1">
            <Search className="pointer-events-none absolute left-2 top-1/2 -translate-y-1/2" size={18} />
            <Input
              className="pl-8"
              placeholder="Buscar tema (ej. IA generativa, creatividad, ética...)"
              value={term}
              onChange={(e) => setTerm(e.target.value)}
            />
          </div>
          <Button type="submit">Buscar</Button>
        </form>
      </div>
    </div>
  );
}

function Reporte({ resumen, hallazgos }: { resumen: string; hallazgos: string[] }) {
  return (
    <Card className="shadow-md">
      <CardHeader>
        <CardTitle>Reporte</CardTitle>
      </CardHeader>
      <CardContent>
        <p className="mb-4 leading-relaxed text-slate-700">{resumen}</p>
        <ul className="list-disc space-y-2 pl-6">
          {hallazgos.map((h, i) => (
            <li key={i} className="text-slate-800">
              {h}
            </li>
          ))}
        </ul>
      </CardContent>
    </Card>
  );
}

function Grafo({ data, onNodeClick }: { data: GraphData; onNodeClick: (n: GraphNode) => void }) {
  const fgRef = useRef<any>();
  const containerRef = useRef<HTMLDivElement>(null);
  const [dims, setDims] = useState<{ w: number; h: number }>({ w: 0, h: 0 });

  // Observa el tamaño del contenedor para fijar límites del área de dibujo
  useEffect(() => {
    if (!containerRef.current) return;
    const el = containerRef.current;
    const ro = new ResizeObserver((entries) => {
      for (const entry of entries) {
        const cr = entry.contentRect;
        setDims({ w: Math.floor(cr.width), h: Math.floor(cr.height) });
      }
    });
    ro.observe(el);
    return () => ro.disconnect();
  }, []);

  // Ajustar fuerza del grafo y auto-zoom al cargar
  useEffect(() => {
    if (!fgRef.current) return;
    const fg = fgRef.current;
    fg.d3Force("charge").strength(-220);
    // Zoom a contenido
    setTimeout(() => fg.zoomToFit(400, 60), 300);
  }, [data]);

  const PADDING = 20; // margen interno para que no toque los bordes

  // Limitar un nodo a los límites visibles (en coordenadas de pantalla)
  const clampNodeToBounds = (n: any) => {
    if (!fgRef.current) return;
    const { w, h } = dims;
    if (!w || !h) return;
    const scr = fgRef.current.graph2ScreenCoords(n.x ?? 0, n.y ?? 0);
    let sx = Math.min(w - PADDING, Math.max(PADDING, scr.x));
    let sy = Math.min(h - PADDING, Math.max(PADDING, scr.y));
    if (sx !== scr.x || sy !== scr.y) {
      const g = fgRef.current.screen2GraphCoords(sx, sy);
      n.x = g.x; n.y = g.y;
      if (n.fx != null && n.fy != null) { n.fx = g.x; n.fy = g.y; }
    }
  };

  const zoomIn = () => {
    if (!fgRef.current) return;
    const k = Math.min(4, (fgRef.current.zoom() || 1) * 1.2);
    fgRef.current.zoom(k, 250);
  };
  const zoomOut = () => {
    if (!fgRef.current) return;
    const k = Math.max(0.4, (fgRef.current.zoom() || 1) / 1.2);
    fgRef.current.zoom(k, 250);
  };
  const zoomFit = () => fgRef.current?.zoomToFit(400, 60);

  return (
    <Card className="shadow-md">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle>Grafo de conocimiento</CardTitle>
        <div className="flex items-center gap-2">
          <Button size="sm" variant="outline" onClick={zoomOut} title="Zoom out">−</Button>
          <Button size="sm" variant="outline" onClick={zoomIn} title="Zoom in">＋</Button>
          <Button size="sm" onClick={zoomFit} title="Ajustar a la vista">Ajustar</Button>
        </div>
      </CardHeader>
      <CardContent className="h-[560px]" ref={containerRef}>
        <ForceGraph2D
          ref={fgRef}
          graphData={data}
          width={dims.w || undefined}
          height={dims.h || undefined}
          minZoom={0.4}
          maxZoom={4}
          nodeCanvasObject={(node: any, ctx: CanvasRenderingContext2D, globalScale: number) => {
            // 📏 Legibilidad: tamaño de fuente estable y ocultar etiquetas si el zoom es muy pequeño
            const label = node.label as string;
            const hideLabels = globalScale > 3.0 ? false : globalScale < 0.35; // oculta si estás muy lejos
            const fontSize = hideLabels ? 0 : Math.max(11, 14 / Math.min(globalScale, 1.4));
            const padding = 6;

            // Nodo base (pastilla)
            if (!hideLabels) {
              ctx.font = `${fontSize}px Inter, system-ui, -apple-system`;
              const textWidth = ctx.measureText(label).width;
              const width = textWidth + padding * 2;
              const height = fontSize + padding * 1.2;
              ctx.fillStyle = "rgba(15,23,42,0.92)"; // slate-900
              ctx.beginPath();
              ctx.roundRect(node.x - width / 2, node.y - height / 2, width, height, 6);
              ctx.fill();

              ctx.textAlign = "center";
              ctx.textBaseline = "middle";
              ctx.fillStyle = "white";
              ctx.fillText(label, node.x, node.y + 1);
            } else {
              // Cuando las etiquetas están ocultas, dibuja un punto legible
              ctx.beginPath();
              ctx.arc(node.x, node.y, 4, 0, 2 * Math.PI);
              ctx.fillStyle = "#0f172a"; // slate-900
              ctx.fill();
            }
          }}
          nodePointerAreaPaint={(node: any, color: string, ctx: CanvasRenderingContext2D, globalScale: number) => {
            const label = node.label as string;
            const hideLabels = globalScale < 0.35;
            if (hideLabels) {
              ctx.beginPath();
              ctx.arc(node.x, node.y, 8, 0, 2 * Math.PI);
              ctx.fillStyle = color;
              ctx.fill();
              return;
            }
            const padding = 6;
            ctx.font = `12px Inter`;
            const textWidth = ctx.measureText(label).width;
            const width = textWidth + padding * 2;
            const height = 12 + padding * 1.2;
            ctx.fillStyle = color;
            ctx.fillRect(node.x - width / 2, node.y - height / 2, width, height);
          }}
          linkColor={() => "#CBD5E1"}
          linkWidth={() => 1}
          linkDirectionalParticles={1}
          linkDirectionalParticleWidth={1.5}
          onNodeClick={(n: any) => onNodeClick(n)}
          // ✅ Permitir arrastrar nodos
          enableNodeDrag={true}
          // ❗ Mantener los nodos dentro del área en cada tick (por si la simulación los empuja)
          onEngineTick={() => {
            data.nodes.forEach((n: any) => clampNodeToBounds(n));
          }}
          // ✅ Mientras se arrastra, fijar la posición y limitar a bordes
          onNodeDrag={(n: any) => {
            n.fx = n.x; n.fy = n.y; // fijar mientras se arrastra
            clampNodeToBounds(n);
          }}
          onNodeDragEnd={(n: any) => {
            // Dejar el nodo fijado donde lo soltaron (opcional: comenta para liberar)
            n.fx = n.x; n.fy = n.y;
            clampNodeToBounds(n);
          }}
          // ✅ Habilitar pan/zoom (rueda del ratón o trackpad) para ver más del grafo
          enableZoomPanInteraction={true}
          cooldownTicks={80}
        />
      </CardContent>
    </Card>
  );
}

function ModalArticulos({ open, onOpenChange, nodo }: { open: boolean; onOpenChange: (v: boolean) => void; nodo?: GraphNode | null }) {
  if (!nodo) return null;
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <span className="rounded-full bg-slate-900 px-2 py-0.5 text-xs font-medium text-white">Nodo</span>
            {nodo.label}
          </DialogTitle>
        </DialogHeader>
        <div className="space-y-2">
          {nodo.articulos?.length ? (
            <ul className="list-disc space-y-2 pl-5">
              {nodo.articulos.map((a, i) => (
                <li key={i}>
                  <a className="underline hover:opacity-80" href={a.link} target="_blank" rel="noreferrer">
                    {a.titulo}
                  </a>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-slate-600">No hay artículos disponibles para este nodo.</p>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}

export default function App() {
  const [rawData, setRawData] = useState<DataJSON | null>(null);
  const [loading, setLoading] = useState(false);
  const [query, setQuery] = useState("");
  const [subData, setSubData] = useState<Nodo[]>([]);
  const [selected, setSelected] = useState<GraphNode | null>(null);
  const [open, setOpen] = useState(false);

  // 1) Intentar cargar el JSON proporcionado por el usuario desde la raíz pública
  useEffect(() => {
    let cancelled = false;
    const load = async () => {
      setLoading(true);
      try {
        // Intenta traer /spaceapps_data.json (colócalo en public/ si usas Vite/CRA)
        const resp = await fetch("/spaceapps_data.json", { cache: "no-store" });
        if (resp.ok) {
          const j = (await resp.json()) as DataJSON;
          if (!cancelled) setRawData(j);
        } else {
          // Fallback al default
          if (!cancelled) setRawData(defaultData);
        }
      } catch (e) {
        if (!cancelled) setRawData(defaultData);
      } finally {
        if (!cancelled) setLoading(false);
      }
    };
    load();
    return () => {
      cancelled = true;
    };
  }, []);

  // 2) Construir grafo actual (filtrado por búsqueda)
  const graph: GraphData = useMemo(() => {
    const base = rawData ?? defaultData;
    const filtered = filterGraphByQuery(base, query);
    return buildGraphData(filtered.grafo);
  }, [rawData, query]);

  const handleSearch = (term: string) => {
    setQuery(term);
    // Forzar recarga de ambos módulos (cambiando key a través del estado)
    setSubData([]); // noop: usado como trigger visual si se necesitara
  };

  const reporte = rawData?.reporte ?? defaultData.reporte;

  return (
    <div className="min-h-screen bg-slate-50">
      <Navbar onSearch={handleSearch} />

      <main className="mx-auto grid max-w-6xl grid-cols-1 gap-6 p-4 md:grid-cols-5">
        {/* Columna izquierda: Reporte */}
        <motion.section
          key={`reporte-${query}`}
          initial={{ opacity: 0, y: 8 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.25 }}
          className="md:col-span-2"
        >
          {loading ? (
            <Card className="shadow-md">
              <CardContent className="flex items-center gap-2 p-6 text-slate-600">
                <Loader2 className="animate-spin" size={18} /> Cargando reporte...
              </CardContent>
            </Card>
          ) : (
            <Reporte resumen={reporte.resumen} hallazgos={reporte.hallazgos} />)
          }
        </motion.section>

        {/* Columna derecha: Grafo */}
        <motion.section
          key={`grafo-${query}`}
          initial={{ opacity: 0, y: 8 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.25, delay: 0.05 }}
          className="md:col-span-3"
        >
          {loading ? (
            <Card className="shadow-md">
              <CardContent className="flex items-center gap-2 p-6 text-slate-600">
                <Loader2 className="animate-spin" size={18} /> Cargando grafo...
              </CardContent>
            </Card>
          ) : (
            <Grafo
              data={graph}
              onNodeClick={(n) => {
                setSelected(n);
                setOpen(true);
              }}
            />
          )}
        </motion.section>
      </main>

      {/* Modal con artículos del nodo */}
      <ModalArticulos open={open} onOpenChange={setOpen} nodo={selected} />

      {/* Carga manual de JSON (opcional) */}
      <footer className="mx-auto max-w-6xl p-4 text-xs text-slate-500">
        <details>
          <summary className="cursor-pointer select-none">Cargar JSON manualmente (opcional)</summary>
          <div className="mt-3 flex flex-col gap-2 rounded-lg border bg-white p-3">
            <input
              type="file"
              accept="application/json"
              onChange={async (e) => {
                const file = e.target.files?.[0];
                if (!file) return;
                const text = await file.text();
                try {
                  const j = JSON.parse(text) as DataJSON;
                  setRawData(j);
                } catch (err) {
                  alert("No se pudo parsear el JSON subido.");
                }
              }}
            />
            <p>
              El archivo debe seguir la estructura {"{"}reporte: 
              {"{"}resumen, hallazgos[]{"}"}, grafo: Nodo[]{"}"}. Cada Nodo contiene {"{"}palabra, articulos[], relaciones[]{"}"}.
            </p>
          </div>
        </details>
        <div className="mt-4">
          <Button
            variant="outline"
            onClick={() => {
              setQuery("");
              setSelected(null);
              setOpen(false);
            }}
            className="gap-1"
          >
            <X size={16} /> Limpiar búsqueda
          </Button>
        </div>
      </footer>
    </div>
  );
}
